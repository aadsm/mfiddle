function expand(t,e){var n=expand.semantics.expand.bind(expand.semantics);return n(t,e,n)}var Set=require("collections/set"),Map=require("collections/map"),Operators=require("./operators");module.exports=expand,expand.semantics={reflexive:Set(["literal","element","rangeContent","mapContent"]),traverseLeft:Set(["with","mapBlock","filterBlock","someBlock","everyBlock","sortedBlock","groupBlock","groupMapBlock"]),expanders:Map({value:function(t,e){return e.value||{type:"value"}},parameters:function(t,e){return e.parameters||{type:"parameters"}},record:function(t,e,n){var i={type:"record",args:[]};for(var a in t.args)i.args[a]=n(t.args[a],e,n);return i},component:function(t,e){return e.components&&t.component?{type:"component",label:e.components.getObjectLabel(t.component)}:t}}),expand:function(t,e,n){return this.expanders.has(t.type)?this.expanders.get(t.type)(t,e,n):this.traverseLeft.has(t.type)?{type:t.type,args:[n(t.args[0],e,n)].concat(t.args.slice(1))}:this.reflexive.has(t.type)?t:{type:t.type,args:t.args.map(function(t){return n(t,e,n)})}}};